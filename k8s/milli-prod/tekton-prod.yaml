apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx-external
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  rules:
  - host: infra-cd-prod.fakebank.com
    http:
      paths:
      - backend:
          serviceName: el-infra-cd-prod
          servicePort: 8080
        path: /
  tls:
  - hosts:
    - infra-cd-prod.fakebank.com
    secretName: infra-cd-prod-tls
---
apiVersion: tekton.dev/v1alpha1
kind: TaskRun
metadata:
  name: infra-cd-prod-webhook-run
  namespace: tekton-pipelines
spec:
  params:
  - name: GitHubOrg
    value: fakebank
  - name: GitHubUser
    value: fakeci
  - name: GitHubRepo
    value: infra
  - name: GitHubSecretName
    value: git-webhook
  - name: ExternalDomain
    value: infra-cd-prod.fakebank.com
  - name: WebhookEvents
    value: '[\"release\"]'
  serviceAccountName: tekton-triggers-createwebhook
  taskRef:
    kind: Task
    name: create-prod-webhook
  timeout: 1000s
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: apply-infra-release
spec:
  params:
  - description: The release version to apply
    name: version
    type: string
  - description: Whether this is a prerelease
    name: prerelease
    type: string
  - description: URL to assets
    name: assetsurl
    type: string
  - description: Whether this is a draft
    name: draft
    type: string
  - description: The repository from which this release was obtained
    name: gitrepository
    type: string
  steps:
  - env:
    - name: GITHUB_OAUTH_TOKEN
      valueFrom:
        secretKeyRef:
          key: access-token
          name: git-webhook
    envFrom:
    - secretRef:
        name: terraform-secrets
    image: 140554600707.dkr.ecr.eu-west-2.amazonaws.com/platform/infra-tester:latest
    name: dry-run
    script: "#!/usr/bin/env ash\nset -e\nASSETS=\"$(curl -qLH \"Authorization: token
      ${GITHUB_OAUTH_TOKEN}\" $(inputs.params.assetsurl))\"\n# Terraform\nTF_ASSET_URL=\"$(echo
      \"$ASSETS\" | jq -r '.[]|select(.name==\"terraform-$(inputs.params.version).tgz\")|.url')\"\nif
      [[ \"$TF_ASSET_URL\" != \"\" ]]; then\n  curl -qLH \"Authorization: token ${GITHUB_OAUTH_TOKEN}\"
      -H \"Accept: application/octet-stream\" \"${TF_ASSET_URL}\" -o terraform-$(inputs.params.version).tgz\n
      \ tar xvf terraform-$(inputs.params.version).tgz\n  cd terraform/$TERRAFORM_DIR\n
      \ echo \"Testing Terraform...\"\n  terraform init -input=false\n  terraform
      plan -input=false\nfi \n# Kops\nKOPS_ASSET_URL=\"$(echo \"$ASSETS\" | jq -r
      '.[]|select(.name==\"kops-cluster-$(inputs.params.version).yaml\")|.url')\"\nif
      [[ \"$KOPS_ASSET_URL\" != \"\" ]]; then\n  curl -qLH \"Authorization: token
      ${GITHUB_OAUTH_TOKEN}\" -H \"Accept: application/octet-stream\" \"${KOPS_ASSET_URL}\"
      -o kops-cluster-$(inputs.params.version).yaml\n  echo \"Testing Kops...\"\n
      \ kops get cluster -o yaml > kops-cluster-prev.yaml\n  kops replace cluster
      -f kops-cluster-$(inputs.params.version).yaml\n  kops update cluster\n  kops
      replace cluster -f kops-cluster-prev.yaml\nfi \n# Kubernetes\nKUBE_ASSET_URL=\"$(echo
      \"$ASSETS\" | jq -r '.[]|select(.name==\"kubernetes-$(inputs.params.version).yaml\")|.url')\"\nif
      [[ \"$KUBE_ASSET_URL\" != \"\" ]]; then\n  curl -qLH \"Authorization: token
      ${GITHUB_OAUTH_TOKEN}\" -H \"Accept: application/octet-stream\" \"${KUBE_ASSET_URL}\"
      -o kubernetes-$(inputs.params.version).yaml\n  echo \"Applying Kubernetes...\"\n
      \ kubectl apply -f \"kubernetes-$(inputs.params.version).yaml\" --dry-run=server\nfi "
    workingDir: /workspace/releases
  - env:
    - name: GITHUB_OAUTH_TOKEN
      valueFrom:
        secretKeyRef:
          key: access-token
          name: git-webhook
    envFrom:
    - secretRef:
        name: terraform-secrets
    image: 140554600707.dkr.ecr.eu-west-2.amazonaws.com/platform/infra-tester:latest
    name: apply
    script: "#!/usr/bin/env ash\nset -e\nASSETS=\"$(curl -qLH \"Authorization: token
      ${GITHUB_OAUTH_TOKEN}\" $(inputs.params.assetsurl))\"\nif ([[ \"$(inputs.params.draft)\"
      == 'false' ]] && [[ \"$(inputs.params.prerelease)\" == 'false' ]]); then\n  echo
      'this is not a prerelease or draft, we will apply it'\n   # Terraform\n   TF_ASSET_URL=\"$(echo
      \"$ASSETS\" | jq -r '.[]|select(.name==\"terraform-$(inputs.params.version).tgz\")|.url')\"
      \n   if [[ \"$TF_ASSET_URL\" != \"\" ]]; then\n     curl -qLH \"Authorization:
      token ${GITHUB_OAUTH_TOKEN}\" -H \"Accept: application/octet-stream\" \"${TF_ASSET_URL}\"
      -o terraform-$(inputs.params.version).tgz\n     tar xvf terraform-$(inputs.params.version).tgz\n
      \    cd terraform/$TERRAFORM_DIR\n     echo \"Applying Terraform...\"\n     terraform
      init -input=false\n     terraform apply -auto-approve -input=false\n   fi \n
      \  # Kops\n   KOPS_ASSET_URL=\"$(echo \"$ASSETS\" | jq -r '.[]|select(.name==\"kops-cluster-$(inputs.params.version).yaml\")|.url')\"
      \n   if [[ \"$KOPS_ASSET_URL\" != \"\" ]]; then\n     curl -qLH \"Authorization:
      token ${GITHUB_OAUTH_TOKEN}\" -H \"Accept: application/octet-stream\" \"${KOPS_ASSET_URL}\"
      -o kops-cluster-$(inputs.params.version).yaml\n     echo \"Applying Kops...\"\n
      \    kops export kubecfg --admin\n     kops replace cluster -f kops-cluster-$(inputs.params.version).yaml\n
      \    kops update cluster --yes\n     kops rolling-update cluster --yes\n   fi
      \n   # Kubernetes\n   KUBE_ASSET_URL=\"$(echo \"$ASSETS\" | jq -r '.[]|select(.name==\"kubernetes-$(inputs.params.version).yaml\")|.url')\"
      \n   if [[ \"$KUBE_ASSET_URL\" != \"\" ]]; then\n     curl -qLH \"Authorization:
      token ${GITHUB_OAUTH_TOKEN}\" -H \"Accept: application/octet-stream\" \"${KUBE_ASSET_URL}\"
      -o kubernetes-$(inputs.params.version).yaml\n     echo \"Applying Kubernetes...\"\n
      \    kubectl apply -f \"kubernetes-$(inputs.params.version).yaml\"\n     echo
      \"{\\\"kind\\\":\\\"ConfigMap\\\",\\\"apiVersion\\\":\\\"v1\\\",\\\"metadata\\\":{\\\"name\\\":\\\"infra-version\\\",\\\"namespace\\\":\\\"tekton-pipelines\\\",\\\"creationTimestamp\\\":null},\\\"data\\\":{\\\"version\\\":\\\"$(inputs.params.version)\\\"}}\"
      | kubectl apply -f -\n   fi \nelse\n  echo 'this is a prerelease or draft, no
      further action required'\nfi"
    workingDir: /workspace/releases
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  params:
  - description: The release version to apply
    name: version
  - description: Whether this is a prerelease
    name: prerelease
  - description: URL to asssets
    name: assetsurl
  - description: Whether this is a draft
    name: draft
  - description: The repository from which this release was obtained
    name: gitrepository
  tasks:
  - name: apply-infra-prod
    params:
    - name: version
      value: $(params.version)
    - name: prerelease
      value: $(params.prerelease)
    - name: assetsurl
      value: $(params.assetsurl)
    - name: draft
      value: $(params.draft)
    - name: gitrepository
      value: $(params.gitrepository)
    taskRef:
      kind: ClusterTask
      name: apply-infra-release
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-prod-webhook
  namespace: tekton-pipelines
spec:
  params:
  - description: The external domain for the EventListener e.g. `$(inputs.params.EventListenerName).<PROXYIP>.nip.io`
    name: ExternalDomain
    type: string
  - description: The GitHub user
    name: GitHubUser
    type: string
  - description: The GitHub repo where the webhook will be created
    name: GitHubRepo
    type: string
  - description: The GitHub organization where the webhook will be created
    name: GitHubOrg
    type: string
  - description: The Secret name for GitHub access token and string. Must contain
      keys 'access-token' and  'secret-string'
    name: GitHubSecretName
    type: string
  - default: github.com
    description: The GitHub domain. Override for GitHub Enterprise
    name: GitHubDomain
    type: string
  - default: '[\"release\"]'
    description: List of events the webhook will send notifications for
    name: WebhookEvents
    type: string
  steps:
  - args:
    - -ce
    - |
      set -e
      echo "Create Webhook"
      if [ $(inputs.params.GitHubDomain) = "github.com" ];then
        curl -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"https://$(inputs.params.ExternalDomain)/\",\"content_type\": \"json\",\"insecure_ssl\": \"0\" ,\"secret\": \"$(cat /var/secret/secret-string)\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/access-token) -L https://api.github.com/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      else
        curl -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"https://$(inputs.params.ExternalDomain)/\",\"content_type\": \"json\",\"insecure_ssl\": \"0\" ,\"secret\": \"$(cat /var/secret/secret-string)\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/access-token) -L https://$(inputs.params.GitHubDomain)/api/v3/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      fi
    command:
    - sh
    image: pstauffer/curl:latest
    name: create-prod-webhook
    volumeMounts:
    - mountPath: /var/secret
      name: github-secret
  volumes:
  - name: github-secret
    secret:
      secretName: $(inputs.params.GitHubSecretName)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  serviceAccountName: tekton-triggers-admin
  triggers:
  - bindings:
    - kind: TriggerBinding
      ref: infra-cd-prod
    interceptors:
    - github:
        eventTypes:
        - release
        secretRef:
          secretKey: secret-string
          secretName: git-webhook
    - cel:
        filter: |-
          (header.match('X-GitHub-Event', 'release') &&

           body.repository.name == 'infra' &&
           body.action == 'released')
    name: infra-cd-prod
    template:
      name: infra-cd-prod
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  params:
  - name: version
    value: $(body.release.tag_name)
  - name: draft
    value: $(body.release.draft)
  - name: prerelease
    value: $(body.release.prerelease)
  - name: assetsurl
    value: $(body.release.assets_url)
  - name: gitrepository
    value: $(body.repository.full_name)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  params:
  - description: The version to deploy
    name: version
  - description: Whether the release is a draft or not
    name: draft
  - description: Whether the release is a prerelease or not
    name: prerelease
  - description: URL to assets
    name: assetsurl
  - description: The github repo from which to obtain releases
    name: gitrepository
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: infra-cd-prod-
      namespace: tekton-pipelines
    spec:
      params:
      - name: version
        value: $(tt.params.version)
      - name: draft
        value: $(tt.params.draft)
      - name: prerelease
        value: $(tt.params.prerelease)
      - name: assetsurl
        value: $(tt.params.assetsurl)
      - name: gitrepository
        value: $(tt.params.gitrepository)
      pipelineRef:
        name: infra-cd-prod
      serviceAccountName: infra-build-bot
