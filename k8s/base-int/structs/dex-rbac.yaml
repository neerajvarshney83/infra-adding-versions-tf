apiVersion: v1
kind: Namespace
metadata:
  name: dex-rbac
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: platform-dex
    chart: dex-1.2.0
    env: prod
    heritage: Helm
    release: platform
  name: dex-auth-sa
  namespace: dex-rbac
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: platform-dex
  namespace: dex-rbac
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - authcodes
  - authrequests
  - connectors
  - oauth2clients
  - offlinesessionses
  - passwords
  - refreshtokens
  - signingkeies
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-readonly
rules:
- apiGroups:
  - ""
  - apps
  - autoscaling
  - batch
  - extensions
  - policy
  - rbac.authorization.k8s.io
  - storage.k8s.io
  resources:
  - componentstatuses
  - configmaps
  - cronjobs
  - daemonsets
  - deployments
  - events
  - endpoints
  - horizontalpodautoscalers
  - ingress
  - ingresses
  - jobs
  - limitranges
  - namespaces
  - nodes
  - pods
  - pods/log
  - pods/exec
  - persistentvolumes
  - persistentvolumeclaims
  - resourcequotas
  - replicasets
  - replicationcontrollers
  - serviceaccounts
  - services
  - statefulsets
  - storageclasses
  - clusterroles
  - roles
  verbs:
  - get
  - watch
  - list
- nonResourceURLs:
  - '*'
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: platform-dex
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: platform-dex
  namespace: dex-rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: platform-dex
subjects:
- kind: ServiceAccount
  name: dex-auth-sa
  namespace: dex-rbac
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex-cluster-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-readonly
subjects:
- kind: Group
  name: fakebank-gh-org:engineering-team
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: platform-dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: platform-dex
subjects:
- kind: ServiceAccount
  name: dex-auth-sa
  namespace: dex-rbac
---
apiVersion: v1
data:
  config.yaml: |-
    issuer: https://dex.fakebank.example.com

    storage:
      type: kubernetes
      config:
        inCluster: true

    web:
      #http: 0.0.0.0:5556

      # If enabled, be sure to configure tls settings above, or use a tool
      # such as let-encrypt to manage the certs.
      # Currently this chart does not support both http and https, and the port
      # is fixed to 5556
      #
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key

    frontend:
      theme: "coreos"
      issuer: "Example Co"
      issuerUrl: "https://example.com"
      logoUrl: https://example.com/images/logo-250x25.png

    expiry:
      signingKeys: "6h"
      idTokens: "24h"

    logger:
      level: debug
      format: json

    oauth2:
      responseTypes: ["code", "token", "id_token"]
      skipApprovalScreen: true

    # Remember you can have multiple connectors of the same 'type' (with different 'id's)
    # If you need e.g. logins with groups for two different Microsoft 'tenants'
    connectors:

    # GitHub configure 'OAuth Apps' -> 'New OAuth App', add callback URL
    # https://github.com/settings/developers
    - type: github
      id: github
      name: GitHub
      config:
        clientID: GITHUB_CLIENT_ID
        clientSecret: GITHUB_CLIENT_SECRET
        redirectURI: https://dex.fakebank.example.com/callback
        # 'orgs' can be used to map groups from Github
        # https://github.com/coreos/dex/blob/master/Documentation/connectors/github.md
        #orgs:
        #- name: foo
        #  teams:
        #  - team-red
        #  - team-blue
        #- name: bar

    # The 'name' must match the k8s API server's 'oidc-client-id'
    staticClients:
    - id: dex-k8s-authenticator
      name: "dex-k8s-authenticator"
      secret: "yPnRbu1MYW2OAFgYF13gkj9QMprhWAjBTKpKTO5mIuc5IE5X"
      redirectURIs:
      - https://login.fakebank.example.com/callback/my-cluster

    enablePasswordDB: True
    staticPasswords: []
    #- email: "admin@example.com"
    #  # bcrypt hash of the string "password"
    #  hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
    #  username: "admin"
    #  userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
kind: ConfigMap
metadata:
  labels:
    app: platform-dex
    chart: dex-1.2.0
    env: prod
    heritage: Helm
    release: platform
  name: platform-dex
  namespace: dex-rbac
---
apiVersion: v1
data: null
kind: Secret
metadata:
  labels:
    app: platform-dex
    chart: dex-1.2.0
    env: prod
    heritage: Helm
    release: platform
  name: platform-dex
  namespace: dex-rbac
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCiAuLi4KIC0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQouLi4KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0=
kind: Secret
metadata:
  labels:
    app: platform-dex
    chart: dex-1.2.0
    env: prod
    heritage: Helm
    release: platform
  name: platform-dex-tls
  namespace: dex-rbac
type: kubernetes.io/tls
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dex
    chart: dex-1.2.0
    env: prod
    heritage: Helm
    release: platform
  name: platform-dex
  namespace: dex-rbac
spec:
  ports:
  - name: http
    port: 5556
    protocol: TCP
    targetPort: http
  selector:
    app: dex
    release: platform
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
  labels:
    app: dex
    chart: dex-1.2.0
    env: prod
    heritage: Helm
    release: platform
  name: platform-dex
  namespace: dex-rbac
spec:
  minReadySeconds: 30
  replicas: 1
  selector:
    matchLabels:
      app: dex
      env: prod
      release: platform
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        checksum/config: fd466cf294068338b296b8dbc525c4fd53c4519d2a7f5f694027e91cb16a88cb
      labels:
        app: dex
        env: prod
        release: platform
    spec:
      containers:
      - command:
        - /usr/local/bin/dex
        - serve
        - /etc/dex/config.yaml
        env: null
        image: quay.io/dexidp/dex:v2.20.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTPS
        name: dex
        ports:
        - containerPort: 5556
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
        - mountPath: /etc/dex
          name: config
        - mountPath: /etc/dex/tls
          name: tls
      serviceAccountName: dex-auth-sa
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: platform-dex
        name: config
      - name: tls
        secret:
          secretName: platform-dex-tls
